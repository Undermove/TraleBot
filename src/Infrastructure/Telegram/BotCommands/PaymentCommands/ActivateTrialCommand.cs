using Application.Users.Commands;
using Infrastructure.Telegram.Models;
using MediatR;
using Microsoft.Extensions.Logging;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;

namespace Infrastructure.Telegram.BotCommands.PaymentCommands;

public class ActivateTrialCommand : IBotCommand
{
    private readonly TelegramBotClient _client;
    private readonly ILogger _logger;
    private readonly IMediator _mediator;

    public ActivateTrialCommand(TelegramBotClient client, ILoggerFactory logger, IMediator mediator)
    {
        _client = client;
        _mediator = mediator;
        _logger = logger.CreateLogger(typeof(PayCommand));
    }

    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.StartsWith(CommandNames.ActivateTrial, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        _logger.LogInformation("User with ID: {id} requested trial", request.User!.Id);

        var result = await _mediator.Send(new ActivatePremiumCommand
        {
            UserId = request.User.Id,
            InvoiceCreatedAdUtc = DateTime.UtcNow,
            IsTrial = true
        }, token);

        if (result == PremiumActivationStatus.Success)
        {
            await _client.EditMessageTextAsync(
                request.UserTelegramId,
                request.MessageId,
                "üéâ–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ç—Ä–∏–∞–ª–∞! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–≤–∏–∑ –ø—Ä–∏—à–ª–∏—Ç–µ /quiz",
                cancellationToken: token);
            _logger.LogInformation("Trial activated for user with ID: {id}", request.User!.Id);
        }
        else
        {
            _logger.LogInformation("Trial ended for user with ID: {id}", request.User!.Id);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üí≥ –ì–æ–¥ –ø—Ä–µ–º–∏—É–º–∞. –ó–∞ 180 —Ä—É–±–ª–µ–π", $"{CommandNames.Pay}") }
            });
        
            await _client.SendTextMessageAsync(
                request.UserTelegramId, 
                "üèÅ–¢–≤–æ–π —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–µ–º–∏—É–º–∞ –æ–ø–ª–∞—Ç–∏–≤ –≥–æ–¥ —Ä–∞–±–æ—Ç—ã. " +
                "\r\nüòá–£ –Ω–∞—Å –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—É. –ù–∏–∫–∞–∫–∏—Ö –≤–Ω–µ–∑–∞–ø–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º!",
                replyMarkup: keyboard,
                cancellationToken: token);
        }
    }
}