using Application.Invoices;
using Infrastructure.Telegram.Models;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;

namespace Infrastructure.Telegram.BotCommands.PaymentCommands;

public class PayCommand(ITelegramBotClient client) : IBotCommand
{
    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(
            commandPayload.StartsWith(CommandNames.Pay, StringComparison.InvariantCultureIgnoreCase) || 
            commandPayload.StartsWith(CommandNames.PayIcon, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("üí≥ –ú–µ—Å—è—Ü: 2,49‚Ç¨", $"{CommandNames.RequestInvoice} {SubscriptionTerm.Month}") },
            new[] { InlineKeyboardButton.WithCallbackData("üí≥ 3 –º–µ—Å—è—Ü–∞: 3,99‚Ç¨", $"{CommandNames.RequestInvoice} {SubscriptionTerm.ThreeMonth}") },
            new[] { InlineKeyboardButton.WithCallbackData("üí≥ 12 –º–µ—Å—è—Ü–µ–≤: 5,99‚Ç¨", $"{CommandNames.RequestInvoice} {SubscriptionTerm.Year}")}
        });
        
        await client.SendTextMessageAsync(request.UserTelegramId,
            "‚≠ê –ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä–µ–π –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è.",
            replyMarkup: keyboard,
            cancellationToken: token);
    }
}