using Application.Common.Extensions;
using Application.VocabularyEntries.Commands;
using Application.VocabularyEntries.Queries.GetVocabularyEntriesList;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;

namespace Infrastructure.Telegram.BotCommands;

public class VocabularyCommand : IBotCommand
{
    private readonly IMediator _mediator;
    private readonly TelegramBotClient _client;

    public VocabularyCommand(IMediator mediator, TelegramBotClient client)
    {
        _mediator = mediator;
        _client = client;
    }

    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.Equals(CommandNames.Vocabulary, StringComparison.InvariantCultureIgnoreCase) ||
                               commandPayload.StartsWith(CommandNames.VocabularyIcon, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        var result =  await _mediator.Send(new GetVocabularyEntriesListQuery() {UserId = request.User!.Id}, token);

        if (!result.VocabularyEntries.Any())
        {
            await _client.SendTextMessageAsync(request.UserTelegramId, "üìñ–°–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç", cancellationToken: token);
            return;
        }
        
        await _client.SendTextMessageAsync(request.UserTelegramId, $"üìñ–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ —É–∂–µ {result.VocabularyWordsCount} —Å–ª–æ–≤!", cancellationToken: token);
        foreach (var batch in result.VocabularyEntries)
        {
            var a = batch.Select(entry => $"{entry.Word} - {entry.Definition}");
            var view = String.Join(Environment.NewLine, a);
            
            await _client.SendTextMessageAsync(request.UserTelegramId, view, cancellationToken: token);    
        }
        
        if (!request.User.IsActivePremium())
        {
            await _client.SendTextMessageAsync(request.UserTelegramId, "–î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", cancellationToken: token);
        }
    }
}