using Application.VocabularyEntries.Queries.GetVocabularyEntriesList;
using Domain.Entities;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace Infrastructure.Telegram.BotCommands;

public class VocabularyCommand : IBotCommand
{
    private readonly IMediator _mediator;
    private readonly TelegramBotClient _client;

    public VocabularyCommand(IMediator mediator, TelegramBotClient client)
    {
        _mediator = mediator;
        _client = client;
    }

    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.Equals(CommandNames.Vocabulary, StringComparison.InvariantCultureIgnoreCase) ||
                               commandPayload.StartsWith(CommandNames.VocabularyIcon, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        var result =  await _mediator.Send(new GetVocabularyEntriesListQuery {UserId = request.User!.Id}, token);

        if (!request.User.IsActivePremium())
        {
            await OfferTrial(request, token, result);
            return;
        }

        if (!result.VocabularyEntries.Any())
        {
            await _client.SendTextMessageAsync(request.UserTelegramId, "üìñ–°–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç", cancellationToken: token);
            return;
        }

        await _client.SendTextMessageAsync(
            request.UserTelegramId, 
            $"üìñ–°–ª–æ–≤ –≤ —Ç–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ: {result.VocabularyWordsCount}" +
            "\r\nü•à - –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞" +
            "\r\nü•á - –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–ª –µ–≥–æ –≤ –±–æ–ª–µ–µ —á–µ–º 3 –∫–≤–∏–∑–∞—Ö" +
            "\r\nüíé - –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –≤ –¥–≤—É—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å–ª–æ–≤–æ.–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–ª –µ–≥–æ –≤ –±–æ–ª–µ–µ —á–µ–º 3 –∫–≤–∏–∑–∞—Ö –ø–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º" +
            "\r\n–ü—Ä–æ—Ö–æ–¥–∏ –∫–≤–∏–∑—ã –∏ –ø–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ü•á –∏ üíé –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º!", 
            cancellationToken: token);
        foreach (var batch in result.VocabularyEntries)
        {
            var vocabularyEntryView = batch
                .Select(entry => 
                    $"{GetMedalType(entry)} {entry.Word} ‚Äì {entry.Definition}");
            var vocabularyPageView = String.Join(Environment.NewLine, vocabularyEntryView);
            
            await _client.SendTextMessageAsync(request.UserTelegramId, vocabularyPageView, ParseMode.Html, cancellationToken: token);    
        }
        
        if (!request.User.IsActivePremium())
        {
            await _client.SendTextMessageAsync(request.UserTelegramId, "–î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", cancellationToken: token);
        }
    }

    private async Task OfferTrial(TelegramRequest request, CancellationToken token, VocabularyEntriesListVm result)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚úÖ –ü—Ä–æ–±–Ω–∞—è –Ω–∞ –º–µ—Å—è—Ü. (–∫–∞—Ä—Ç–∞ –Ω–µ –Ω—É–∂–Ω–∞)",
                    $"{CommandNames.ActivateTrial}")
            },
            new[] { InlineKeyboardButton.WithCallbackData("üí≥ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", $"{CommandNames.Pay}") }
        });
        
        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            $"üîê–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ {result.VocabularyWordsCount} —Å–ª–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç—Ä–∏–∞–ª –∏–ª–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É",
            replyMarkup: keyboard,
            cancellationToken: token);
    }

    private string GetMedalType(VocabularyEntry entry)
    {
        switch (entry.GetMasteringLevel())
        {
            case MasteringLevel.NotMastered:
                return "ü•à";
            case MasteringLevel.MasteredInForwardDirection:
                return "ü•á";
            case MasteringLevel.MasteredInBothDirections:
                return "üíé";
        }
        
        return "";
    }
}