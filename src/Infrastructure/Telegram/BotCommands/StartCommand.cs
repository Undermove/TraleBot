using Application.Users.Commands.CreateUser;
using Infrastructure.Telegram.CommonComponents;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;

namespace Infrastructure.Telegram.BotCommands;

public class StartCommand : IBotCommand
{
    private readonly ITelegramBotClient _client;
    private readonly IMediator _mediator;

    public StartCommand(ITelegramBotClient client, IMediator mediator)
    {
        _client = client;
        _mediator = mediator;
    }

    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.Contains(CommandNames.Start));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        await _mediator.Send(new CreateUserCommand {TelegramId = request.UserTelegramId}, token);
        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            $"–ü—Ä–∏–≤–µ—Ç, {request.UserName}! " +
            "\r\n–ú–µ–Ω—è –∑–æ–≤—É—Ç Trale –∏ —è –ø–æ–º–æ–≥–∞—é —Ä–∞—Å—à–∏—Ä—è—Ç—å —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å üôÇ" +
            "\r\n" +
            "\r\nüá¨üáß–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–µ —Å–ª–æ–≤–æ, –∞ —è –Ω–∞–π–¥—É –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ –∑–∞–Ω–µ—Å—É –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å." +
            "\r\n" +
            "\r\nüîÑ–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ü–µ—Ä–µ–≤–æ–∂—É –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã ü§©" +
            "\r\n" +
            "\r\n–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:" +
            "\r\n/quiz - –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–ª–æ–≤–∞" +
            "\r\n/vocabulary - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ" +
            "\r\n/menu - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é",
            replyMarkup: MenuKeyboard.GetMenuKeyboard(),
            cancellationToken: token);
    }
}