using Application.Quizzes.Commands.CreateSharedQuiz;
using Application.Users.Commands.CreateUser;
using Domain.Entities;
using Infrastructure.Telegram.BotCommands.Quiz;
using Infrastructure.Telegram.CommonComponents;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;
using Telegram.Bot.Types;
using User = Domain.Entities.User;

namespace Infrastructure.Telegram.BotCommands;

public class StartCommand : IBotCommand
{
    private readonly ITelegramBotClient _client;
    private readonly IMediator _mediator;

    public StartCommand(ITelegramBotClient client, IMediator mediator)
    {
        _client = client;
        _mediator = mediator;
    }

    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.Contains(CommandNames.Start));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        User? user = request.User;
        if (request.User == null)
        {
            var userCreatedResultType = await _mediator.Send(new CreateUser {TelegramId = request.UserTelegramId}, token);
            userCreatedResultType.Match(
                created => user = created.User, 
                exists => user = exists.User);
        }

        var commandWithArgs = request.Text.Split(' ');
        if (IsContainsArguments(commandWithArgs))
        {
            var result = await _mediator.Send(new CreateQuizFromShareableCommand
            {
                UserId = request.User?.Id ?? user!.Id,
                ShareableQuizId = Guid.Parse(commandWithArgs[1])
            }, token);

            await result.Match(
                created => SendFirstQuestion(request, token, created),
                _ => Task.CompletedTask,
                _ => SendAnotherQuizInProcessMessage(request, token));
            
            return;
        }
        
        await _client.SendTextMessageAsync(
            request.UserTelegramId,
@$"–ü—Ä–∏–≤–µ—Ç, {request.UserName}!
–ú–µ–Ω—è –∑–æ–≤—É—Ç Trale –∏ —è –ø–æ–º–æ–≥–∞—é –≤–µ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –≤—ã—É—á–µ–Ω–Ω–æ–µ üôÇ

–†–∞–±–æ—Ç–∞—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏: 
–ê–Ω–≥–ª–∏–π—Å–∫–∏ üá¨üáß
–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π üá¨üá™

–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–µ —Å–ª–æ–≤–æ, –∞ —è –Ω–∞–π–¥—É –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ –∑–∞–Ω–µ—Å—É –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É.
–û–¥–∏–Ω —è–∑—ã–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –º—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤–æ–π —Å–ª–æ–≤–∞—Ä—å ‚Äì –ø–æ –Ω–µ–¥–æ—Ä–æ–≥–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.

–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É—á–∏—Ç—å, –∏ –Ω–∞—á–Ω–µ–º!
",
            replyMarkup: MenuKeyboard.GetMenuKeyboard(Language.English),
            cancellationToken: token);
    }

    private Task<Message> SendAnotherQuizInProcessMessage(TelegramRequest request, CancellationToken token)
    {
        return _client.SendTextMessageAsync(
            request.UserTelegramId,
            $"–ü—Ä–æ—Å—Ç–∏, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –æ–¥–∏–Ω –∫–≤–∏–∑ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –µ–≥–æ.",
            cancellationToken: token);
    }

    private async Task SendFirstQuestion(TelegramRequest request, CancellationToken token, SharedQuizCreated sharedQuizCreated)
    {
        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            $"–ù–∞—á–Ω–µ–º –∫–≤–∏–∑! –í –Ω–µ–≥–æ –≤–æ–π–¥–µ—Ç {sharedQuizCreated.QuestionsCount} –≤–æ–ø—Ä–æ—Å–æ–≤." +
            $"\r\nüèÅ–ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–∏–∑ ‚Äì –≤–æ—Ç –∫–æ–º–∞–Ω–¥–∞ {CommandNames.StopQuiz}",
            cancellationToken: token);


        await _client.SendQuizQuestion(request, sharedQuizCreated.FirstQuestion, token);
    }
    
    private bool IsContainsArguments(string[] args)
    {
        return args.Length > 1;
    }
}