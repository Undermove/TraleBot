using Application.Users.Commands.CreateUser;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;

namespace Infrastructure.Telegram.BotCommands;

public class StartCommand : IBotCommand
{
    private readonly TelegramBotClient _client;
    private readonly IMediator _mediator;

    public StartCommand(TelegramBotClient client, IMediator mediator)
    {
        _client = client;
        _mediator = mediator;
    }

    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.Contains(CommandNames.Start));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        await _mediator.Send(new CreateUserCommand {TelegramId = request.UserTelegramId}, token);
        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            $"–ü—Ä–∏–≤–µ—Ç, {request.UserName}! –ú–µ–Ω—è –∑–æ–≤—É—Ç Trale. –û—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ translate and learn. –û—Å—Ç—Ä–æ—É–º–Ω–æ, –¥–∞? üôÇ" +
            "\r\nüá¨üáß–Ø –ø–æ–º–æ–≥–∞—é —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –ü–æ–¥–æ–π–¥—É —Ç–µ–º, –∫—Ç–æ –µ–≥–æ —É–∂–µ –∑–Ω–∞–µ—Ç, –Ω–æ —Ö–æ—á–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å." +
            "\r\n–ö –ø—Ä–∏–º–µ—Ä—É, —Ç–µ–º –∫—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç —Ñ–∏–ª—å–º—ã –∏ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –≤ –Ω–∏—Ö –Ω–µ–∑–Ω–∞–∫–æ–º—ã–µ —Å–ª–æ–≤–∞." +
            "\r\n–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–µ —Å–ª–æ–≤–æ, –∞ —è –Ω–∞–π–¥—É –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ –∑–∞–Ω–µ—Å—É –≤ —Å–ª–æ–≤–∞—Ä—å. " +
            "\r\nüîÑ–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ü–µ—Ä–µ–≤–æ–∂—É –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã ü§©" +
            "\r\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ /quiz, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –ø–æ —Å–ª–æ–≤–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é." +
            "\r\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ /stopquiz, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–∏–∑. –ü—Ä–∏–≥–æ–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ —Ç—É–¥–∞ –Ω–∞–∂–∞–ª. üòâ",
            cancellationToken: token);
    }
}