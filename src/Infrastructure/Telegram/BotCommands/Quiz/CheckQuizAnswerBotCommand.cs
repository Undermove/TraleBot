using Application.Quizzes.Commands.CheckQuizAnswer;
using Application.Quizzes.Commands.CompleteQuiz;
using Application.Quizzes.Queries;
using Domain.Entities;
using Infrastructure.Telegram.CommonComponents;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace Infrastructure.Telegram.BotCommands.Quiz;

public class CheckQuizAnswerBotCommand(ITelegramBotClient client, IMediator mediator, BotConfiguration config)
    : IBotCommand
{
    public async Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var isQuizStarted = await mediator.Send(
            new CheckIsQuizStartedQuery { UserId = request.User!.Id },
            ct);
        return isQuizStarted;
    }

    public async Task Execute(TelegramRequest request, CancellationToken ct)
    {
        var checkResult = await mediator.Send(
            new CheckQuizAnswerCommand { UserId = request.User!.Id, Answer = request.Text },
            ct);

        await (checkResult switch {
            CheckQuizAnswerResult.CorrectAnswer correctAnswer => SendCorrectAnswerConfirmation(request, correctAnswer, ct),
            CheckQuizAnswerResult.IncorrectAnswer incorrectAnswer => SendIncorrectAnswerConfirmation(request, incorrectAnswer, ct),
            CheckQuizAnswerResult.QuizCompleted completed => CompleteQuiz(request, completed, ct),
            CheckQuizAnswerResult.SharedQuizCompleted sharedQuizCompleted => CompleteSharedQuiz(request, sharedQuizCompleted, ct),
            _ => throw new ArgumentOutOfRangeException()
        });
    }

    private async Task SendIncorrectAnswerConfirmation(TelegramRequest request, CheckQuizAnswerResult.IncorrectAnswer checkResult,
        CancellationToken ct)
    {
        await client.SendTextMessageAsync(
            request.UserTelegramId,
            "‚ùåüòû–ü—Ä–æ—Å—Ç–∏, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π." +
            $"\r\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {checkResult.CorrectWord}",
            cancellationToken: ct);
        
        if (checkResult.NextQuizQuestion != null)
        {
            await client.SendTextMessageAsync(
                request.UserTelegramId,
                "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–≤–æ–º!",
                cancellationToken: ct);
            await client.SendQuizQuestion(request, checkResult.NextQuizQuestion, ct);
            return;
        }
        
        await Execute(request, ct);
    }

    private async Task SendCorrectAnswerConfirmation(
        TelegramRequest request,
        CheckQuizAnswerResult.CorrectAnswer checkResult,
        CancellationToken ct)
    {
        await client.SendTextMessageAsync(
            request.UserTelegramId,
            "‚úÖ–í–µ—Ä–Ω–æ! –¢—ã –º–æ–ª–æ–¥—á–∏–Ω–∞!",
            cancellationToken: ct);

        if (checkResult.AcquiredLevel != null)
        {
            await client.SendTextMessageAsync(
                request.UserTelegramId,
                $"{GetMedalType(checkResult.AcquiredLevel.Value)}",
                cancellationToken: ct);
        }
        else if (checkResult is { ScoreToNextLevel: not null, NextLevel: not null })
        {
            await client.SendTextMessageAsync(
                request.UserTelegramId,
                $"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –µ—â–µ –≤ {checkResult.ScoreToNextLevel} –∫–≤–∏–∑–∞—Ö –∏ –ø–æ–ª—É—á–∏ –ø–æ –Ω–µ–º—É {GetMedalType(checkResult.NextLevel.Value)}!",
                cancellationToken: ct);
        }

        if (checkResult.NextQuizQuestion != null)
        {
            await client.SendQuizQuestion(request, checkResult.NextQuizQuestion, ct);
            return;
        }

        await Execute(request, ct);
    }

    private async Task CompleteSharedQuiz(TelegramRequest request, CheckQuizAnswerResult.SharedQuizCompleted shareQuizCompleted,
        CancellationToken ct)
    {
        await mediator.Send(new CompleteQuizCommand { UserId = request.User!.Id }, ct);
        
        await SendResultCongrats(request, ct, shareQuizCompleted.CurrentUserScore);
        
        await client.SendTextMessageAsync(
            request.UserTelegramId,
            $"""
             üñá–ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
             –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
             ‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:         {shareQuizCompleted.CurrentUserScore}%

             –†–µ–∑—É–ª—å—Ç–∞—Ç {shareQuizCompleted.QuizAuthorName}:
             üìè–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:         {shareQuizCompleted.QuizAuthorScore}%
             """,
            cancellationToken: ct);

        if (!request.User.InitialLanguageSet)
        {
            await client.SendTextMessageAsync(
                request.UserTelegramId,
                @$"–ü—Ä–∏–≤–µ—Ç, {request.UserName}!
–ú–µ–Ω—è –∑–æ–≤—É—Ç Trale –∏ —è –ø–æ–º–æ–≥–∞—é –≤–µ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –≤—ã—É—á–µ–Ω–Ω–æ–µ üôÇ

–†–∞–±–æ—Ç–∞—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏: 
–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß
–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π üá¨üá™

–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–µ —Å–ª–æ–≤–æ, –∞ —è –Ω–∞–π–¥—É –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ –∑–∞–Ω–µ—Å—É –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É.

–û–¥–∏–Ω —è–∑—ã–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –º—É–ª—å—Ç–∏—è–∑—ã–∫–æ–≤–æ–π —Å–ª–æ–≤–∞—Ä—å ‚Äì –ø–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.

–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É—á–∏—Ç—å, –∏ –Ω–∞—á–Ω–µ–º!
",
                replyMarkup: LanguageKeyboard.GetLanguageKeyboard($"{CommandNames.SetInitialLanguage}"),
                cancellationToken: ct);
        }
    }

    private async Task CompleteQuiz(TelegramRequest request, CheckQuizAnswerResult.QuizCompleted quizCompleted, CancellationToken ct)
    {
        var quizStats = await mediator.Send(new CompleteQuizCommand { UserId = request.User!.Id }, ct);
        
        await SendResultCongrats(request, ct, quizStats.CorrectnessPercent);
        
        await client.SendTextMessageAsync(
            request.UserTelegramId,
            "–í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" +
            $"\r\n‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:            {quizStats.CorrectAnswersCount}" +
            $"\r\n‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:        {quizStats.IncorrectAnswersCount}" +
            $"\r\nüìè–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:         {quizStats.CorrectnessPercent}%",
            replyMarkup: new InlineKeyboardMarkup(
                InlineKeyboardButton.WithCallbackData($"{CommandNames.MenuIcon} –ú–µ–Ω—é", CommandNames.Menu)
                ),
            cancellationToken: ct);
        
        await client.SendTextMessageAsync(
            request.UserTelegramId,
            "üëâ–•–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–≤–∏–∑–æ–º —Å –¥—Ä—É–≥–æ–º? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É: ",
            replyMarkup: new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithSwitchInlineQuery(
                        "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–≤–∏–∑–æ–º",
                        $"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ—Å–æ—Ä–µ–≤–Ω—É–µ–º—Å—è –≤ –∑–Ω–∞–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤:" +
                        $"\r\nhttps://t.me/{config.BotName}?start={quizCompleted.ShareableQuizId}")
                }
            }),
            parseMode: ParseMode.Html,
            cancellationToken: ct);
    }

    private async Task SendResultCongrats(TelegramRequest request, CancellationToken ct, double correctnessPercent)
    {
        if (Math.Abs(correctnessPercent - 100) < 0.001)
        {
            await client.SendTextMessageAsync(
                request.UserTelegramId,
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üéâüéâüéâ",
                replyMarkup: new ReplyKeyboardRemove(),
                cancellationToken: ct);
            await client.SendTextMessageAsync(
                request.UserTelegramId,
                "üéÜ",
                cancellationToken: ct);
        }
        else
        {
            await client.SendTextMessageAsync(
                request.UserTelegramId,
                "üèÑ‚Äç–í–æ—Ç —ç—Ç–æ –∫–≤–∏–∑! –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è! üíì",
                replyMarkup: new ReplyKeyboardRemove(),
                cancellationToken: ct);
        }
    }

    private string GetMedalType(MasteringLevel masteringLevel)
    {
        return masteringLevel switch
        {
            MasteringLevel.NotMastered => "ü•à",
            MasteringLevel.MasteredInForwardDirection => "ü•á",
            MasteringLevel.MasteredInBothDirections => "üíé",
            _ => ""
        };
    }
}