using Application.Quizzes.Commands.StartNewQuiz;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;

namespace Infrastructure.Telegram.BotCommands.Quiz;

public class QuizCommand(ITelegramBotClient client, IMediator mediator) : IBotCommand
{
    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.Equals(CommandNames.Quiz, StringComparison.InvariantCultureIgnoreCase) ||
                               commandPayload.StartsWith(CommandNames.QuizIcon,
                                   StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        var result =
            await mediator.Send(new StartNewQuizCommand
                {
                    UserId = request.User!.Id,
                    UserName = request.UserName,
                },
                token);
        
        await (result switch 
        {
            StartNewQuizResult.QuizStarted started => SendFirstQuestion(request, started, token),
            StartNewQuizResult.NotEnoughWords _ => HandleNotEnoughWords(request, token),
            StartNewQuizResult.QuizAlreadyStarted _ => HandleQuizAlreadyStarted(request, token),
            _ => throw new ArgumentOutOfRangeException()
        });
    }

    private async Task SendFirstQuestion(TelegramRequest request, StartNewQuizResult.QuizStarted quizStarted, CancellationToken token)
    {
        await client.EditMessageTextAsync(
            request.UserTelegramId,
            request.MessageId,
            $"–ù–∞—á–Ω–µ–º –∫–≤–∏–∑! –í –Ω–µ–≥–æ –≤–æ–π–¥–µ—Ç {quizStarted.QuizQuestionsCount} –≤–æ–ø—Ä–æ—Å–æ–≤." +
            $"\r\nüèÅ–ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–∏–∑ ‚Äì –≤–æ—Ç –∫–æ–º–∞–Ω–¥–∞ {CommandNames.StopQuiz}",
            cancellationToken: token);

        await client.SendQuizQuestion(request, quizStarted.FirstQuestion, token);
    }

    private async Task HandleNotEnoughWords(TelegramRequest request, CancellationToken token)
    {
        await client.EditMessageTextAsync(
            request.UserTelegramId,
            request.MessageId,
            "–î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∫–≤–∏–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ —Å–ª–æ–≤ –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –Ω–æ–≤—ã–µ üòâ",
            cancellationToken: token);
    }

    private async Task HandleQuizAlreadyStarted(TelegramRequest request, CancellationToken token)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData($"{CommandNames.StopQuizIcon} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–≤–∏–∑",
                    $"{CommandNames.StopQuiz}")
            },
        });

        await client.EditMessageTextAsync(
            request.UserTelegramId,
            request.MessageId,
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã —É–∂–µ –Ω–∞—á–∞–ª –æ–¥–∏–Ω –∫–≤–∏–∑." +
            "\r\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
            replyMarkup: keyboard,
            cancellationToken: token);
    }
}