using Application.Quizzes.Commands;
using Application.Quizzes.Commands.GetNextQuizQuestion;
using Application.Quizzes.Commands.StartNewQuiz;
using Domain.Entities;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;

namespace Infrastructure.Telegram.BotCommands.Quiz;

public class StartQuizBotCommand : IBotCommand
{
    private readonly ITelegramBotClient _client;
    private readonly IMediator _mediator;

    public StartQuizBotCommand(ITelegramBotClient client, IMediator mediator)
    {
        _client = client;
        _mediator = mediator;
    }

    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.StartsWith(CommandNames.Quiz) && 
                               commandPayload.Split(' ').Length > 1);
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        var quizTypeString = request.Text.Split(' ')[1];
        Enum.TryParse<QuizTypes>(quizTypeString, true, out var quizType);

        var result = await _mediator.Send(new StartNewQuizCommand {UserId = request.User!.Id, QuizType = quizType}, token);

        await result.Match<Task>(
            started => SendFirstQuestion(request, token, started),
            _ => HandleNotEnoughWords(request, token),
            _ => HandleNeedPremiumToActivate(request, token),
            _ => HandleQuizAlreadyStarted(request, token)
        );
    }
    
    private async Task SendFirstQuestion(TelegramRequest request, CancellationToken token, QuizStarted result)
    {
        await _client.EditMessageTextAsync(
            request.UserTelegramId,
            request.MessageId,
            $"–ù–∞—á–Ω–µ–º –∫–≤–∏–∑! –í –Ω–µ–≥–æ –≤–æ–π–¥–µ—Ç {result.QuizQuestionsCount} –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. " +
            "\r\n–¢—ã –≤—ã–∑—ã–≤–∞–µ—à—å —É –º–µ–Ω—è –≤–æ—Å—Ç–æ—Ä–≥!" +
            $"\r\nüèÅ–ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–∏–∑ ‚Äì –≤–æ—Ç –∫–æ–º–∞–Ω–¥–∞ {CommandNames.StopQuiz}",
            cancellationToken: token);

        var quizQuestion = await _mediator.Send(new GetNextQuizQuestionQuery { UserId = request.User!.Id }, token);

        if (quizQuestion != null)
        {
            await _client.SendQuizQuestion(request, quizQuestion, token);
        }
    }
    
    private async Task HandleNotEnoughWords(TelegramRequest request, CancellationToken token)
    {
        await _client.EditMessageTextAsync(
            request.UserTelegramId,
            request.MessageId,
            "–î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∫–≤–∏–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ —Å–ª–æ–≤ –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –Ω–æ–≤—ã–µ üòâ",
            cancellationToken: token);
    }

    private async Task HandleNeedPremiumToActivate(TelegramRequest request, CancellationToken token)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("‚úÖ –ü—Ä–æ–±–Ω–∞—è –Ω–∞ –º–µ—Å—è—Ü. (–∫–∞—Ä—Ç–∞ –Ω–µ –Ω—É–∂–Ω–∞)", $"{CommandNames.ActivateTrial}") },
            new[] { InlineKeyboardButton.WithCallbackData("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", $"{CommandNames.Pay}") }
        });
            
        await _client.EditMessageTextAsync(
            request.UserTelegramId,
            request.MessageId,
            "–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∫–≤–∏–∑–∞ –Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç.",
            replyMarkup: keyboard,
            cancellationToken: token);
    }
    
    private async Task HandleQuizAlreadyStarted(TelegramRequest request, CancellationToken token)
    {
        await _client.EditMessageTextAsync(
            request.UserTelegramId,
            request.MessageId,
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã —É–∂–µ –Ω–∞—á–∞–ª –æ–¥–∏–Ω –∫–≤–∏–∑." +
            $"\r\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ {CommandNames.StopQuiz}",
            cancellationToken: token);
    }
}