using Infrastructure.Telegram.Models;
using Microsoft.Extensions.Logging;
using Telegram.Bot;
using Telegram.Bot.Types.Payments;
using Telegram.Bot.Types.ReplyMarkups;

namespace Infrastructure.Telegram.BotCommands;

public class TryTrialCommand : IBotCommand
{
    private readonly TelegramBotClient _client;
    private readonly BotConfiguration _configuration;
    private readonly ILogger _logger;

    public TryTrialCommand(
        TelegramBotClient client, 
        BotConfiguration configuration, 
        ILoggerFactory logger)
    {
        _client = client;
        _configuration = configuration;
        _logger = logger.CreateLogger(typeof(PayCommand));
    }

    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(
            commandPayload.StartsWith(CommandNames.TryTrial, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        _logger.LogInformation("User with ID: {id} requested invoice", request.User!.Id);

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            InlineKeyboardButton.WithCallbackData("‚úÖ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é (–∫–∞—Ä—Ç–∞ –Ω–µ –Ω—É–∂–Ω–∞)", $"{CommandNames.ActivateTrial}"),
            InlineKeyboardButton.WithCallbackData("üí≥ –í–∑—è—Ç—å –Ω–∞ –≥–æ–¥ —Å–æ —Å–∫–∏–¥–∫–æ–π", $"{CommandNames.Pay}")
        });
        await _client.SendTextMessageAsync(
            request.UserTelegramId, 
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø—Ä–æ–±–Ω—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü." +
            "\r\n–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã.",
            replyMarkup: keyboard,
            cancellationToken: token);
        
        _logger.LogInformation("Invoice sent to user with ID: {id}", request.User!.Id);
    }
}