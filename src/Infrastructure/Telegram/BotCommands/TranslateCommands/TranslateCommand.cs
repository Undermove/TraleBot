using Application.VocabularyEntries.Commands.TranslateAndCreateVocabularyEntry;
using Domain.Entities;
using Infrastructure.Telegram.CommonComponents;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;

namespace Infrastructure.Telegram.BotCommands.TranslateCommands;

public class TranslateCommand(ITelegramBotClient client, IMediator mediator) : IBotCommand
{
    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(!commandPayload.Contains("/"));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        var result = await mediator.Send(new TranslateAndCreateVocabularyEntry
        {
            Word = request.Text,
            UserId = request.User?.Id ?? throw new ApplicationException("User not registered"),
        }, token);

        await (result switch
        {
            CreateVocabularyEntryResult.TranslationSuccess success => client.HandleSuccess(request, success, token),
            CreateVocabularyEntryResult.TranslationExists exists => client.HandleTranslationExists(request, exists,  token),
            CreateVocabularyEntryResult.EmojiDetected => HandleEmojiDetected(request, token),
            CreateVocabularyEntryResult.PromptLengthExceeded => HandlePromptLengthExceeded(request, token),
            CreateVocabularyEntryResult.TranslationFailure => HandleFailure(request, token),
            _ => throw new ArgumentOutOfRangeException(nameof(result))
        });
    }
    
    private async Task HandleEmojiDetected(TelegramRequest request, CancellationToken token)
    {
        await client.SendTextMessageAsync(
            request.UserTelegramId,
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –º–Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ üòÖ.",
            cancellationToken: token);
    }
    
    private async Task HandlePromptLengthExceeded(TelegramRequest request, CancellationToken token)
    {
        await client.SendTextMessageAsync(
            request.UserTelegramId,
            @"
üìè –î–ª–∏–Ω–Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –µ—ë. –†–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–µ –±–æ–ª–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤.
",
            cancellationToken: token);
    }
    
    private async Task HandleFailure(TelegramRequest request, CancellationToken token)
    {
        await client.SendTextMessageAsync(
            request.UserTelegramId,
            $"üôá‚Äç –ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–ª–æ–≤–æ. –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {request.User!.Settings.CurrentLanguage.GetLanguageFlag()}" +
            "\r\n–°–ª–æ–≤–∞ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –∏–ª–∏ –≤ –Ω—ë–º –µ—Å—Ç—å –æ–ø–µ—á–∞—Ç–∫–∞." +
            "\r\n" +
            "\r\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥, —Ç–æ –≤–≤–µ–¥–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥" +
            "\r\n–ö –ø—Ä–∏–º–µ—Ä—É: cat-–∫–æ—à–∫–∞",
            cancellationToken: token);
    }
}