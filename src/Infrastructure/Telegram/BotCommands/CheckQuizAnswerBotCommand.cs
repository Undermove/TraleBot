using Application.Quizzes.Commands;
using Application.Quizzes.Commands.CheckQuizAnswer;
using Application.Quizzes.Commands.CompleteQuiz;
using Application.Quizzes.Queries;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;

namespace Infrastructure.Telegram.BotCommands;

public class CheckQuizAnswerBotCommand: IBotCommand
{
    private readonly TelegramBotClient _client;
    private readonly IMediator _mediator;

    public CheckQuizAnswerBotCommand(TelegramBotClient client, IMediator mediator)
    {
        _client = client;
        _mediator = mediator;
    }

    public async Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var isQuizStarted = await _mediator.Send(
            new CheckIsQuizStartedQuery { UserId = request.UserId },
            ct);
        return isQuizStarted;
    }

    public async Task Execute(TelegramRequest request, CancellationToken ct)
    {
        var checkResult = await _mediator.Send(
            new CheckQuizAnswerCommand { UserId = request.UserId, Answer = request.Text },
            ct);

        if (checkResult.IsAnswerCorrect)
        {
            await _client.SendTextMessageAsync(
                request.UserTelegramId,
                "üéÜ–í–µ—Ä–Ω–æ! –¢—ã –º–æ–ª–æ–¥—á–∏–Ω–∞!",
                cancellationToken: ct);
        }
        else
        {
            await _client.SendTextMessageAsync(
                request.UserTelegramId,
                "üòû–ü—Ä–æ—Å—Ç–∏, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. " +
                $"\r\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {checkResult.CorrectAnswer}" +
                "\r\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–≤–æ–º!",
                cancellationToken: ct);
        }
        
        await TrySendNextQuestion(request, ct);
    }

    private async Task TrySendNextQuestion(TelegramRequest request, CancellationToken ct)
    {
        var word = await _mediator.Send(new GetNextQuizQuestionQuery { UserId = request.UserId }, ct);
        if (word == null)
        {
            await CompleteQuiz(request, ct);
            return;
        }

        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            $"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: {word.Word}",
            cancellationToken: ct);
    }

    private async Task CompleteQuiz(TelegramRequest request, CancellationToken ct)
    {
        var quizStats = await _mediator.Send(new CompleteQuizCommand { UserId = request.UserId }, ct);
        double correctnessPercent = Math.Round(100 * (quizStats.CorrectAnswersCount / (quizStats.IncorrectAnswersCount + (double)quizStats.CorrectAnswersCount)), 0);
        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            "üèÑ‚Äç–í–æ—Ç —ç—Ç–æ –∫–≤–∏–∑! –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è." +
            $"\r\n–í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" +
            $"\r\n‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:            {quizStats.CorrectAnswersCount}" +
            $"\r\n‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:        {quizStats.IncorrectAnswersCount}" +
            $"\r\nüìè–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correctnessPercent}",
            cancellationToken: ct);
    }
}