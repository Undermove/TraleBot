using Application.Quizzes;
using Application.Quizzes.Commands;
using Application.Quizzes.Queries;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;

namespace Infrastructure.Telegram.BotCommands;

public class CheckQuizAnswerBotCommand: IBotCommand
{
    private readonly TelegramBotClient _client;
    private readonly IMediator _mediator;

    public CheckQuizAnswerBotCommand(TelegramBotClient client, IMediator mediator)
    {
        _client = client;
        _mediator = mediator;
    }

    public async Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var isQuizStarted = await _mediator.Send(
            new CheckIsQuizStartedQuery { UserId = request.UserId },
            ct);
        return isQuizStarted;
    }

    public async Task Execute(TelegramRequest request, CancellationToken ct)
    {
        var isAnswerCorrect = await _mediator.Send(
            new CheckQuizAnswerCommand { UserId = request.UserId, Answer = request.Text },
            ct);

        if (isAnswerCorrect)
        {
            var word = await _mediator.Send(new GetNextQuizQuestionQuery {UserId = request.UserId}, ct);
            if (word == null)
            {
                await _mediator.Send(new CompleteQuizCommand() {UserId = request.UserId}, ct);
                await _client.SendTextMessageAsync(
                    request.UserTelegramId,
                    "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –∫–≤–∏–∑ –∑–∞–∫–æ–Ω—á–µ–Ω",
                    cancellationToken: ct);
                return;
            }
        
            await _client.SendTextMessageAsync(
                request.UserTelegramId,
                $"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: {word.Word}",
                cancellationToken: ct);
            
            return;
        }

        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            "üòû–ü—Ä–æ—Å—Ç–∏, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ—É–π –µ—â–µ —Ä–∞–∑.",
            cancellationToken: ct);
    }
}