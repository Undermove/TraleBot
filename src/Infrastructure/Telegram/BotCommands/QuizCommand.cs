using Application.Quizzes.Commands;
using Application.Quizzes.Commands.StartNewQuiz;
using Infrastructure.Telegram.Models;
using MediatR;
using Telegram.Bot;

namespace Infrastructure.Telegram.BotCommands;

public class QuizCommand : IBotCommand
{
    private readonly TelegramBotClient _client;
    private readonly IMediator _mediator;

    public QuizCommand(TelegramBotClient client, IMediator mediator)
    {
        _client = client;
        _mediator = mediator;
    }

    public Task<bool> IsApplicable(TelegramRequest request, CancellationToken ct)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.Contains(CommandNames.Quiz));
    }

    public async Task Execute(TelegramRequest request, CancellationToken token)
    {
        var result = await _mediator.Send(new StartNewQuizCommand {UserId = request.UserId}, token);

        if (await IsVocabularyEmpty(request, token, result) ||
            await IsQuizNotStarted(request, token, result))
        {
            return;
        }
        
        await StartNewQuiz(request, token, result);
    }

    private async Task StartNewQuiz(TelegramRequest request, CancellationToken token, StartNewQuizResult result)
    {
        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            $"–ù–∞—á–Ω–µ–º –∫–≤–∏–∑! –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã –≤—ã—É—á–∏–ª {result.LastWeekVocabularyEntriesCount} –Ω–æ–≤—ã—Ö —Å–ª–æ–≤. " +
            "\r\n–¢—ã –≤—ã–∑—ã–≤–∞–µ—à—å —É –º–µ–Ω—è –≤–æ—Å—Ç–æ—Ä–≥!" +
            $"\r\nüèÅ–ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–∏–∑ ‚Äì –≤–æ—Ç –∫–æ–º–∞–Ω–¥–∞ {CommandNames.StopQuiz}",
            cancellationToken: token);

        var word = await _mediator.Send(new GetNextQuizQuestionQuery { UserId = request.UserId }, token);

        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            $"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: {word!.Word}",
            cancellationToken: token);
    }

    private async Task<bool> IsQuizNotStarted(TelegramRequest request, CancellationToken token, StartNewQuizResult result)
    {
        if (result.IsQuizStartSuccessful)
        {
            return false;
        }
        
        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã —É–∂–µ –Ω–∞—á–∞–ª –æ–¥–∏–Ω –∫–≤–∏–∑." +
            $"\r\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ {CommandNames.StopQuiz}",
            cancellationToken: token);
        return true;

    }

    private async Task<bool> IsVocabularyEmpty(TelegramRequest request, CancellationToken token, StartNewQuizResult result)
    {
        if (result.LastWeekVocabularyEntriesCount != 0)
        {
            return false;
        }
        
        await _client.SendTextMessageAsync(
            request.UserTelegramId,
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç–∏–∫ —Å–ª–æ–≤–æ cat –∏ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑.üòâ",
            cancellationToken: token);
        return true;

    }
}